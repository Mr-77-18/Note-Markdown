
/*
 * This stub is generated by jrpc, DO NOT modify it!
 */

#ifndef JRPC_ARITHMETICCLIENTSTUB_H
#define JRPC_ARITHMETICCLIENTSTUB_H

#include <jackson/Value.h>

#include <jrpc/client/BaseClient.h>
#include <jrpc/util.h>

namespace jrpc {

class ArithmeticClientStub : noncopyable {
public:
  ArithmeticClientStub(EventLoop *loop, const InetAddress &serverAddress)
      : client_(loop, serverAddress) {
    client_.setConnectionCallback([this](const TcpConnectionPtr &conn) {
      if (conn->connected()) {
        INFO("connected");
        conn_ = conn;
        cb_(conn_);
      } else {
        INFO("disconnected");
        assert(conn_ != nullptr);
        cb_(conn_);
      }
    });
  }

  ~ArithmeticClientStub() = default;

  void start() { client_.start(); }

  void setConnectionCallback(const ConnectionCallback &cb) { cb_ = cb; }

  void Add(double lhs, double rhs, const ResponseCallback &cb) {
    json::Value params(json::TYPE_OBJECT);

    params.addMember("lhs", lhs);

    params.addMember("rhs", rhs);

    json::Value call(json::TYPE_OBJECT);
    call.addMember("jsonrpc", "2.0");
    call.addMember("method", "Arithmetic.Add");
    call.addMember("params", params);

    assert(conn_ != nullptr);
    client_.sendCall(conn_, call, cb);
  }

  void Sub(double lhs, double rhs, const ResponseCallback &cb) {
    json::Value params(json::TYPE_OBJECT);

    params.addMember("lhs", lhs);

    params.addMember("rhs", rhs);

    json::Value call(json::TYPE_OBJECT);
    call.addMember("jsonrpc", "2.0");
    call.addMember("method", "Arithmetic.Sub");
    call.addMember("params", params);

    assert(conn_ != nullptr);
    client_.sendCall(conn_, call, cb);
  }

private:
  TcpConnectionPtr conn_;
  ConnectionCallback cb_;
  BaseClient client_;
};

} // namespace jrpc
#endif // JRPC_ARITHMETICCLIENTSTUB_H
