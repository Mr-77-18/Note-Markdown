
/*
 * This stub is generated by jrpc, DO NOT modify it!
 */
#ifndef JRPC_ARITHMETICSERVICESTUB_H
#define JRPC_ARITHMETICSERVICESTUB_H

#include <jackson/Value.h>

#include <jrpc/server/RpcServer.h>
#include <jrpc/server/RpcService.h>
#include <jrpc/util.h>

class ArithmeticService;

namespace jrpc {

  template <typename S> class ArithmeticServiceStub : noncopyable {
    protected:
      //ArithmeticService service(rpcServer)->ArithmeticServiceStub()
      explicit ArithmeticServiceStub(RpcServer &server) {
        static_assert(std::is_same_v<S, ArithmeticService>,
            "derived class name should be 'ArithmeticService'");

        auto service = new RpcService;//注意区分rpcservice以及rpcserver

        service->addProcedureReturn(//这个add和lhs是std::string_view类型,std::string_view就是比std::string的视图
            "Add", new ProcedureReturn(
              std::bind(&ArithmeticServiceStub::AddStub, this, _1, _2),
              "lhs", json::TYPE_DOUBLE, "rhs", json::TYPE_DOUBLE));

        service->addProcedureReturn(
            "Sub", new ProcedureReturn(
              std::bind(&ArithmeticServiceStub::SubStub, this, _1, _2),
              "lhs", json::TYPE_DOUBLE, "rhs", json::TYPE_DOUBLE));

        server.addService("Arithmetic", service);//说明一个rpcserver可以对应多个rpcservice
      }

      ~ArithmeticServiceStub() = default;

    private:
      void AddStub(json::Value &request, const RpcDoneCallback &done) {
        auto &params = request["params"];

        if (params.isArray()) {
          auto lhs = params[0].getDouble();
          auto rhs = params[1].getDouble();

          //注意，UserDoneCallback(requese , done)是创建临时对象，不是函数调用
          convert().Add(lhs, rhs, UserDoneCallback(request, done));
        } else {
          auto lhs = params["lhs"].getDouble();
          auto rhs = params["rhs"].getDouble();

          convert().Add(lhs, rhs, UserDoneCallback(request, done));
        }
      }
      void SubStub(json::Value &request, const RpcDoneCallback &done) {
        auto &params = request["params"];

        if (params.isArray()) {
          auto lhs = params[0].getDouble();
          auto rhs = params[1].getDouble();

          convert().Sub(lhs, rhs, UserDoneCallback(request, done));//解析左操作数和右操作数
        } else {
          auto lhs = params["lhs"].getDouble();
          auto rhs = params["rhs"].getDouble();

          convert().Sub(lhs, rhs, UserDoneCallback(request, done));
        }
      }

    private:
      S &convert() { return static_cast<S &>(*this); }//转换，将本对象装换成S对象,S是这个类的模板参数
  };
} // namespace jrpc

#endif // JRPC_ARITHMETICSERVICESTUB_H
